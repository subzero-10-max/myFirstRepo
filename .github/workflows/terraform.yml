name: 'Terraform Plan/Apply'

on: #workflow_dispatch
  push:
    paths:
      - 'code/teraform/**'
      - 'code/terraform2/**'
#       - 'code/**'

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
#     outputs:
#       tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        
#     - name: Determine working directory
#       id: determine-directory
#       run: |
#         if [[ "$GITHUB_EVENT_PATH" ]]; then
#           folder=$(dirname "${{ fromJSON(toString(github.event_path)) }}")
#         else
#           folder=""
#         fi
#         echo "::set-output name=folder::$folder"
# if [ -d "code/teraform" ]; then
#             echo "::set-output name=directory::code/teraform"
#           elif [ -d "code/terraform2" ]; then
#             echo "::set-output name=directory::code/terraform2"
#           fi
#     - name: Determine working directory
#       id: set-directory
#       run: |
#           if [ -d "${{ github.event.inputs.path }}/teraform" ]; then
#             echo "::set-output name=directory::${{ github.event.inputs.path }}/teraform"
#           elif [ -d "${{ github.event.inputs.path }}/terraform2" ]; then
#             echo "::set-output name=directory::${{ github.event.inputs.path }}/terraform2"
#           fi

#     - name: Determine changed folder
#       run: |
#         changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
#         for file in $changed_files; do
#           if [[ $file == "code/teraform"* ]]; then
#             echo "Changes made in Teraform folder"
#           elif [[ $file == "code/terraform2"* ]]; then
#             echo "Changes made in Terraform2 folder"
#           fi
#         done

#     - name: Get latest commit hash
#       id: get_commit_hash
#       run: echo "::set-output name=hash::$(git rev-parse HEAD)"

#     - name: Determine changed folder
#       run: |
#         changed_files=$(git diff --name-only ${GITHUB_SHA} ${GITHUB_BASE_REF})
#         for file in $changed_files; do
#           if [[ $file == "code/teraform"* ]]; then
#             echo "Changes made in Teraform folder"
#           elif [[ $file == "code/terraform2"* ]]; then
#             echo "Changes made in Terraform2 folder"
#           fi
#         done
        
    - name: Determine changed folder
      run: |
        # Get list of files changed in this push event
        changed_files=$(git diff --name-only HEAD^ HEAD)


        # Loop through changed files and check if they belong to "terraform" or "terraform2" folder
        for file in $changed_files; do
          if [[ $file == "code/teraform"* ]]; then
            echo "Changes made in Teraform folder"
          elif [[ $file == "code/terraform2"* ]]; then
            echo "Changes made in Terraform2 folder"
          fi
        done
#     - name: Set working directory
#       run: |
#           echo "DIR=${{ steps.set-directory.outputs.directory }}" >> $GITHUB_ENV
#           echo "WORKSPACE=${{ github.workspace }}" >> $GITHUB_ENV
          
      


#     - name: set variable
#       run: |
#         echo "MYVAR=$GITHUB_EVENT_PATH" >> $GITHUB_ENV
        
#     - name: directory
#       run: |
#         pwd
        
#     - name: git config
#       run: |
#         git config --global url."https://${PERSONAL_ACCESS_TOKEN}@github.com".insteadOf "https://github.com"
        
#     - name: Print working directory
#       env:
#         folder: ${{ env.MYVAR }}
#       run: |
#         echo "WORKSPACE is $WORKSPACE"
#         echo "DIR is $DIR"


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#     - name: Terraform Init
#       run: terraform init
#       working-directory: $MYVAR

#     - name: Terraform Validate
#       run: terraform validate
#       working-directory: $MYVAR
    
#     - name: Terraform plan
#       run: terraform plan
#       working-directory: $MYVAR
